# Maintainer: Dr. Chang Liu, PhD <cl91tp@gmail.com>

pkgbase=linux-gsgpu
pkgver=6.6.rc2.r328.59c8d9f13b72
pkgrel=1
pkgdesc="Mainline Linux kernel with GSGPU module"
url="https://www.kernel.org"
arch=(loong64)
license=(GPL2)
makedepends=(
    bc
    cpio
    gettext
    git
    libelf
    pahole
    perl
    python
    tar
    xz
)
options=('!strip')
_srcname=linux-gsgpu
source=(
    "$_srcname::git+https://github.com/cl91/linux#branch=gsgpu"
    config         # the main kernel config file
)
sha256sums=(
    'SKIP'
    'eee1c20533180fbc7baf273c5f50cbe292ffc6b6574f515364f41c69487d00e6'  # config
)

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

_make() {
    test -s version
    make KERNELRELEASE="$(<version)" "$@"
}

prepare() {
    cd $_srcname

    echo "Setting version..."
    echo "-$pkgrel" > localversion.10-pkgrel
    echo "${pkgbase#linux}" > localversion.20-pkgname
    make defconfig
    make -s kernelrelease > version
    make mrproper

    echo "Setting config..."
    cp ../config .config
    _make olddefconfig

    echo "Prepared $pkgbase version $(<version)"
}

build() {
    cd $_srcname
    _make all
}

_package() {
    pkgdesc="The $pkgdesc kernel and modules"
    depends=(
	coreutils
	initramfs
	kmod
	gsgpu-firmware
    )
    optdepends=(
	'wireless-regdb: to set the correct wireless channels of your country'
	'linux-firmware: firmware images needed for some devices'
    )
    provides=(
	KSMBD-MODULE
	VIRTUALBOX-GUEST-MODULES
	WIREGUARD-MODULE
    )
    replaces=(
	virtualbox-guest-modules-arch
	wireguard-arch
    )

    cd $_srcname
    local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

    echo "Installing boot image..."
    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(_make -s image_name)" "$modulesdir/vmlinuz"

    # Used by mkinitcpio to name the kernel
    echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

    echo "Installing modules..."
    ZSTD_CLEVEL=19 _make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
		   DEPMOD=/doesnt/exist modules_install  # Suppress depmod

    # remove build and source links
    rm -f "$modulesdir"/{source,build}
}

_package-headers() {
    pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
    depends=(pahole)

    cd $_srcname
    local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

    echo "Installing build files..."
    install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
	    localversion.* version vmlinux
    install -Dt "$builddir/kernel" -m644 kernel/Makefile
    install -Dt "$builddir/arch/loongarch" -m644 arch/loongarch/Makefile
    cp -t "$builddir" -a scripts

    echo "Installing headers..."
    cp -t "$builddir" -a include
    cp -t "$builddir/arch/loongarch" -a arch/loongarch/include
    install -Dt "$builddir/arch/loongarch/kernel" -m644 arch/loongarch/kernel/asm-offsets.s

    install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
    install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

    # https://bugs.archlinux.org/task/13146
    install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

    # https://bugs.archlinux.org/task/20402
    install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
    install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
    install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

    # https://bugs.archlinux.org/task/71392
    install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

    echo "Installing KConfig files..."
    find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

    echo "Removing unneeded architectures..."
    local arch
    for arch in "$builddir"/arch/*/; do
	[[ $arch = */loongarch/ ]] && continue
	echo "Removing $(basename "$arch")"
	rm -r "$arch"
    done

    echo "Removing documentation..."
    rm -r "$builddir/Documentation"

    echo "Removing broken symlinks..."
    find -L "$builddir" -type l -printf 'Removing %P\n' -delete

    echo "Removing loose objects..."
    find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

    echo "Stripping build tools..."
    local file
    while read -rd '' file; do
	case "$(file -Sib "$file")" in
	    application/x-sharedlib\;*)      # Libraries (.so)
		strip -v $STRIP_SHARED "$file" ;;
	    application/x-archive\;*)        # Libraries (.a)
		strip -v $STRIP_STATIC "$file" ;;
	    application/x-executable\;*)     # Binaries
		strip -v $STRIP_BINARIES "$file" ;;
	    application/x-pie-executable\;*) # Relocatable binaries
		strip -v $STRIP_SHARED "$file" ;;
	esac
    done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

    echo "Stripping vmlinux..."
    strip -v $STRIP_STATIC "$builddir/vmlinux"

    echo "Adding symlink..."
    mkdir -p "$pkgdir/usr/src"
    ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
    eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
